{"version":3,"sources":["components/TodoForm.tsx","components/TodoListItem.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoForm","addTodo","useState","newTodo","setNewTodo","className","type","value","placeholder","onChange","e","target","onClick","preventDefault","TodoListItem","todo","toggleComplete","complete","checked","text","TodoList","todos","map","App","setTodos","selectedTodo","updatedTodos","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAMaA,EAAoC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClD,EAA8BC,mBAAiB,IAA/C,mBAAOC,EAAP,KAAgBC,EAAhB,KAYA,OACE,uBAAMC,UAAU,YAAhB,UACE,uBAAOC,KAAK,OAAOC,MAAOJ,EAASE,UAAU,aAAaG,YAAY,aAAaC,SAZlE,SAACC,GACpBN,EAAWM,EAAEC,OAAOJ,UAYhB,wBAAQD,KAAK,SAASD,UAAU,cAAcO,QAT/B,SAACF,GACpBA,EAAEG,iBACFZ,EAAQE,GACRC,EAAW,KAMP,qBCfKU,EAA4C,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,eAChE,OACE,6BACE,wBAAOX,UAAWU,EAAKE,SAAU,qBAAuB,WAAxD,UACA,uBACEX,KAAK,WACLG,SAAU,kBAAMO,EAAeD,IAC/BG,QAASH,EAAKE,WAEbF,EAAKI,WCRDC,EAAoC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOL,EAAqB,EAArBA,eACzD,OACE,6BACEK,EAAMC,KAAI,SAAAP,GAAI,OACb,cAAC,EAAD,CAEGA,KAAMA,EACNC,eAAgBA,GAFXD,EAAKI,YCwBLI,MAhCf,WACE,MAA0BrB,mBAAsB,IAAhD,mBAAOmB,EAAP,KAAcG,EAAd,KAkBA,OACE,sBAAKnB,UAAU,WAAf,UACE,iCACE,6CAIF,cAAC,EAAD,CAAUJ,QAbW,SAAAE,GACP,KAAZA,GACFqB,EAAS,GAAD,mBAAKH,GAAL,CAAY,CAAEF,KAAMhB,EAASc,UAAU,SAY/C,cAAC,EAAD,CAAUI,MAAOA,EAAOL,eAxBW,SAAAS,GACrC,IAAMC,EAAeL,EAAMC,KAAI,SAAAP,GAC7B,OAAIA,IAASU,EACJ,2BAAKV,GAAZ,IAAkBE,UAAWF,EAAKE,WAE7BF,KAETS,EAASE,UCDEC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a9cad7a3.chunk.js","sourcesContent":["import React, { useState, ChangeEvent, FormEvent } from 'react';\n\ninterface TodoFormProps {\n  addTodo: AddTodo;\n}\n\nexport const TodoForm: React.FC<TodoFormProps> = ({ addTodo }) => {\n  const [newTodo, setNewTodo] = useState<string>(\"\");\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setNewTodo(e.target.value);\n  }\n\n  const handleSubmit = (e: FormEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    addTodo(newTodo);\n    setNewTodo(\"\");\n  }\n\n  return (\n    <form className=\"todo-form\">\n      <input type=\"text\" value={newTodo} className=\"todo-input\" placeholder=\"Add a todo\" onChange={handleChange} />\n        <button type=\"submit\" className=\"todo-button\" onClick={handleSubmit}>\n          Add\n        </button>\n    </form>\n  )\n};","import React from \"react\";\n\ninterface TodoListItemProps {\n  todo: Todo;\n  toggleComplete: ToggleComplete;\n}\n\nexport const TodoListItem: React.FC<TodoListItemProps> = ({ todo, toggleComplete }) => {\n  return (\n    <li>\n      <label className={todo.complete? \"todo-row completed\" : \"todo-row\"}>\n      <input\n        type=\"checkbox\"\n        onChange={() => toggleComplete(todo)}\n        checked={todo.complete}\n        />\n        {todo.text}\n      </label>\n    </li>\n  )\n}","import React from \"react\";\nimport { TodoListItem } from './TodoListItem';\n\ninterface TodoListProps {\n  todos: Array<Todo>;\n  toggleComplete: ToggleComplete;\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos, toggleComplete }) => {\n  return (\n    <ul>\n     {todos.map(todo => (\n       <TodoListItem\n          key={todo.text}\n          todo={todo}\n          toggleComplete={toggleComplete}\n        />\n     ))}\n    </ul>\n  );\n};","import React, { useState } from 'react';\nimport './App.css';\nimport { TodoForm } from './components/TodoForm';\nimport { TodoList } from './components/TodoList';\n\nfunction App() {\n  const [todos, setTodos] = useState<Array<Todo>>([]);\n\n  const toggleComplete: ToggleComplete = selectedTodo => {\n    const updatedTodos = todos.map(todo => {\n      if (todo === selectedTodo) {\n        return { ...todo, complete: !todo.complete };\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  const addTodo: AddTodo = newTodo => {\n    if (newTodo !== \"\") {\n      setTodos([...todos, { text: newTodo, complete: false }]);\n    }\n  };\n\n  return (\n    <div className=\"todo-app\">\n      <header>\n        <h1>\n        Todo List\n        </h1> \n      </header>\n      <TodoForm addTodo={addTodo}/>\n      <TodoList todos={todos} toggleComplete={toggleComplete}/>\n    </div>\n  );\n};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}